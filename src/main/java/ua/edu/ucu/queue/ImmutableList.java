package ua.edu.ucu.queue;

// У результаті змін, що призводять на модифікації (зміну стану)
// колекції має повртатись нова колекція
public interface ImmutableList<E> {

    ImmutableList add(E e);
    //додає елемент у кінець колекції

    ImmutableList add(int index, E e);
    //додає елемент до колекції за індексом, та кидає виключну ситуацію,
    // якщо індекс виходить за межі колекції

    ImmutableList addAll(E[] c);
    //додає масив елементів у кінець колекції

    ImmutableList addAll(int index, E[] c);
    // додає масив елементів починаючи з зазначеного індекса,
    // та кидає виключну ситуацію, якщо індекс виходить за межі колекції

    Object get(int index); //повертає елемент за індексом, та кидає
    // виключну ситуацію, якщо індекс виходить за межі колекції

    ImmutableList remove(int index); //видаляє елемент за індексом,
    // та кидає виключну ситуацію, якщо індекс виходить за межі колекції

    ImmutableList set(int index, E e); //змінює значення елементу
    // за індексом, та кидає виключну ситуацію, якщо індекс виходить
    // за межі колекції

    int indexOf(Object e); //шукає індекс елемента (повертає індекс першого
    // який знайшов, або -1 у випадку відсутності)

    int size(); //розмір колекції

    ImmutableList clear(); //очищує вміст колекції

    boolean isEmpty(); //якщо у колеції нема елементів то повертає true

    E[] toArray(); //перетворює колекцію до масиву обєктів

    @Override
    String toString(); //повертає рядок, де через кому відображаютсься елементи
    // колекції
}